{"ast":null,"code":"var _jsxFileName = \"/home/scott/Dropbox/MERN Class (MIT xPRO)/Capstone Bad Bank Project/goodbankfe/src/components/deposit.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport UserContext from \"./context.js\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport NumberFormat from \"react-number-format\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Deposit = () => {\n  _s();\n\n  const ctx = React.useContext(UserContext);\n  const [confMsg, setConfMsg] = React.useState(\"\");\n\n  const setTextColor = () => {\n    return ctx.currentBalance <= 0 ? \"red\" : \"green\";\n  };\n\n  function onFormSubmit(values) {\n    const depositAmount = parseFloat(values.amt);\n    ctx.setCurrentBalance(ctx.currentBalance + depositAmount);\n    const url = `/account/update/${ctx.currentEmail}/${depositAmount}`;\n    fetch(url).then(response => response.text()).then(text => {\n      try {\n        const data = JSON.parse(text);\n        console.log(\"JSON:\", data);\n        setConfMsg(\"Balance Updated!\");\n      } catch (err) {\n        console.log(\"err:\", text);\n        setConfMsg(\"Deposit Failed!\");\n      }\n    });\n    setTimeout(() => setConfMsg(\"\"), 5000);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        amt: \"$0.00\"\n      },\n      validationSchema: validationSchema,\n      onSubmit: (values, _ref) => {\n        let {\n          resetForm,\n          setSubmitting\n        } = _ref;\n        onFormSubmit(values);\n        setSubmitting(false);\n        resetForm();\n      },\n      children: _ref2 => {\n        let {\n          isSubmitting,\n          isValid,\n          dirty\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              color: setTextColor(),\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            },\n            children: [\"Balance:\", /*#__PURE__*/_jsxDEV(NumberFormat, {\n              value: ctx.currentBalance,\n              displayType: \"text\",\n              thousandSeparator: true,\n              decimalScale: \"2\",\n              fixedDecimalScale: true,\n              prefix: \"  $\",\n              style: {\n                color: setTextColor()\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card, {\n            bg: \"success\",\n            text: \"light\",\n            style: {\n              width: \"18rem\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: \"Deposit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: \"Deposit Amount :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                id: \"amt\",\n                type: \"number\",\n                name: \"amt\",\n                step: \"any\",\n                placeholder: \"$0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"row justify-content-center\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  type: \"submit\",\n                  style: {\n                    margin: \"20px\"\n                  },\n                  disabled: isSubmitting || !(isValid && dirty),\n                  children: \"Deposit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 1\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: 6,\n      justifyContent: \"flex-end\",\n      alignItems: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        style: {\n          color: \"green\"\n        },\n        children: confMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Deposit, \"qmSROkTt2WZ0hZvjDDBHZ50S8iM=\");\n\n_c = Deposit;\nconst validationSchema = Yup.object().shape({\n  amt: Yup.number().test(\"is positive\", \"You must enter a positive number\", value => value > 0)\n});\nexport default Deposit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deposit\");","map":{"version":3,"sources":["/home/scott/Dropbox/MERN Class (MIT xPRO)/Capstone Bad Bank Project/goodbankfe/src/components/deposit.js"],"names":["React","Button","Card","UserContext","Formik","Form","Field","Yup","NumberFormat","Grid","Deposit","ctx","useContext","confMsg","setConfMsg","useState","setTextColor","currentBalance","onFormSubmit","values","depositAmount","parseFloat","amt","setCurrentBalance","url","currentEmail","fetch","then","response","text","data","JSON","parse","console","log","err","setTimeout","validationSchema","resetForm","setSubmitting","isSubmitting","isValid","dirty","color","display","justifyContent","alignItems","width","marginLeft","marginRight","margin","object","shape","number","test","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport UserContext from \"./context.js\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst Deposit = () => {\r\n  const ctx = React.useContext(UserContext);\r\n  const [confMsg, setConfMsg] = React.useState(\"\");\r\n  const setTextColor = () => {\r\n    return ctx.currentBalance <= 0 ? \"red\" : \"green\";\r\n  };\r\n\r\n  function onFormSubmit(values) {\r\n    const depositAmount = parseFloat(values.amt);\r\n    ctx.setCurrentBalance(ctx.currentBalance + depositAmount);\r\n\r\n    const url = `/account/update/${ctx.currentEmail}/${depositAmount}`;\r\n   \r\n    fetch(url)\r\n      .then((response) => response.text())\r\n      .then((text) => {\r\n        try {\r\n          const data = JSON.parse(text);\r\n          console.log(\"JSON:\", data);\r\n          setConfMsg(\"Balance Updated!\");\r\n        } catch (err) {\r\n          console.log(\"err:\", text);\r\n          setConfMsg(\"Deposit Failed!\");\r\n        }\r\n      });\r\n\r\n    setTimeout(() => setConfMsg(\"\"), 5000);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          amt: \"$0.00\",\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, { resetForm, setSubmitting }) => {\r\n          onFormSubmit(values);\r\n          setSubmitting(false);\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({ isSubmitting, isValid, dirty }) => (\r\n          <Form>\r\n            <h2\r\n              style={{\r\n                color: setTextColor(),\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              Balance:\r\n              <NumberFormat\r\n                value={ctx.currentBalance}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n                decimalScale={\"2\"}\r\n                fixedDecimalScale={true}\r\n                prefix={\"  $\"}\r\n                style={{ color: setTextColor() }}\r\n              />\r\n            </h2>\r\n            <Card bg=\"success\" text=\"light\" style={{ width: \"18rem\" , marginLeft: \"auto\", marginRight: \"auto\" }}>\r\n            \r\n              <Card.Body>\r\n                <Card.Title>Deposit</Card.Title>\r\n\r\n                <Card.Text>Deposit Amount :</Card.Text>\r\n                <Field\r\n                  id=\"amt\"\r\n                  type=\"number\"\r\n                  name=\"amt\"\r\n                  step=\"any\"\r\n                  placeholder=\"$0.00\"\r\n                />\r\n<div class=\"row justify-content-center\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  style={{ margin: \"20px\" }}\r\n                  disabled={isSubmitting || !(isValid && dirty)}\r\n                >\r\n                  Deposit\r\n                </Button></div>\r\n              </Card.Body>\r\n            </Card>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <Grid container item xs={6} justifyContent=\"flex-end\" alignItems=\"center\">\r\n        <h5 style={{ color: \"green\" }}>{confMsg}</h5>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  amt: Yup.number().test(\r\n    \"is positive\",\r\n    \"You must enter a positive number\",\r\n    (value) => value > 0\r\n  ),\r\n});\r\n\r\nexport default Deposit;\r\n"]},"metadata":{},"sourceType":"module"}