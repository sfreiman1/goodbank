{"ast":null,"code":"import _slicedToArray from\"/home/scott/Dropbox/MERN Class (MIT xPRO)/Capstone Good Bank Project/goodbank/goodbankFE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// login.js - testing Formik and Yup\nimport React,{useContext}from\"react\";import{Formik,Field,Form,ErrorMessage}from\"formik\";import{Redirect}from\"react-router-dom\";import{Button,Card}from\"react-bootstrap\";import UserContext from\"./context.js\";import*as Yup from\"yup\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Login=function Login(_ref){var loggedIn=_ref.loggedIn,setLoggedIn=_ref.setLoggedIn;var ctx=useContext(UserContext);var _React$useState=React.useState(),_React$useState2=_slicedToArray(_React$useState,2),updateState=_React$useState2[1];var forceUpdate=React.useCallback(function(){return updateState({});},[]);function ValidateLogin(newEmail,newPassword){// Check to make sure user is in database\nfetch(\"/account/find/\".concat(newEmail)).then(function(response){return response.json();}).then(function(data){if(data.length===0){alert(\"Login Failed\");setLoggedIn(false);}else if(data[0].password!==newPassword){alert(\"Password Incorrect\");setLoggedIn(false);}else{ctx.setCurrentUser(data[0].name);ctx.setCurrentEmail(newEmail);ctx.setCurrentBalance(parseFloat(data[0].balance));setLoggedIn(true);}});}var LoginForm=function LoginForm(){return/*#__PURE__*/_jsx(Formik,{initialValues:{email:\"\",password:\"\"},validationSchema:validationSchema,onSubmit:function onSubmit(values,_ref2){var setSubmitting=_ref2.setSubmitting;ValidateLogin(values.email,values.password);forceUpdate();setSubmitting(false);},children:function children(_ref3){var isSubmitting=_ref3.isSubmitting,isValid=_ref3.isValid,dirty=_ref3.dirty;return/*#__PURE__*/_jsx(Form,{children:/*#__PURE__*/_jsx(Card,{bg:\"warning\",text:\"dark\",style:{width:\"36rem\"},children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{children:\"Login to Bad Bank\"}),/*#__PURE__*/_jsxs(Card.Text,{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email\"}),/*#__PURE__*/_jsx(Field,{id:\"email\",name:\"email\",className:\"form-control\",type:\"email\",placeholder:\"Enter Email\"}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"email\",component:\"span\",className:\"error\",style:{color:\"red\"}}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"Password\"}),/*#__PURE__*/_jsx(Field,{id:\"password\",name:\"password\",className:\"form-control\",type:\"password\",placeholder:\"Enter Password\"}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"password\",component:\"span\",className:\"error\",style:{color:\"red\"}})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"primary\",className:\"btn btn-primary\",disabled:isSubmitting||!(isValid&&dirty),children:\"Login\"})]})})});}});};var handleLogOut=function handleLogOut(){ctx.setCurrentUser(\"\");setLoggedIn(false);};if(ctx.currentUser===\"\"){return LoginForm();}else if(loggedIn){return/*#__PURE__*/_jsx(Card,{bg:\"warning\",text:\"dark\",style:{width:\"36rem\"},children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsxs(Card.Title,{children:[\"Welcome \",ctx.currentUser,\"!\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"danger\",className:\"btn btn-primary\",onClick:handleLogOut,children:\"Log Out\"})]})});}else{setLoggedIn(true);if(ctx.currentUser===\"admin\"){return/*#__PURE__*/_jsx(Redirect,{to:\"/alldata\"});}else{return/*#__PURE__*/_jsx(Redirect,{to:\"/deposit\"});}}};var validationSchema=Yup.object().shape({email:Yup.string().email(\"Invalid email address\").required(\"Email is required\"),password:Yup.string().required(\"Password is required\")});export default Login;","map":{"version":3,"sources":["/home/scott/Dropbox/MERN Class (MIT xPRO)/Capstone Good Bank Project/goodbank/goodbankFE/src/components/login.js"],"names":["React","useContext","Formik","Field","Form","ErrorMessage","Redirect","Button","Card","UserContext","Yup","Login","loggedIn","setLoggedIn","ctx","useState","updateState","forceUpdate","useCallback","ValidateLogin","newEmail","newPassword","fetch","then","response","json","data","length","alert","password","setCurrentUser","name","setCurrentEmail","setCurrentBalance","parseFloat","balance","LoginForm","email","validationSchema","values","setSubmitting","isSubmitting","isValid","dirty","width","color","handleLogOut","currentUser","object","shape","string","required"],"mappings":"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","sourcesContent":["// login.js - testing Formik and Yup\n\nimport React, { useContext } from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { Button, Card } from \"react-bootstrap\";\n\nimport UserContext from \"./context.js\";\n\nimport * as Yup from \"yup\";\n\nconst Login = ({ loggedIn, setLoggedIn }) => {\n  const ctx = useContext(UserContext);\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  function ValidateLogin(newEmail, newPassword) {\n    // Check to make sure user is in database\n    fetch(`/account/find/${newEmail}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.length === 0) {\n          alert(\"Login Failed\");\n          setLoggedIn(false);\n        } else if (data[0].password !== newPassword) {\n          alert(\"Password Incorrect\");\n          setLoggedIn(false);\n        } else {\n          ctx.setCurrentUser(data[0].name);\n          ctx.setCurrentEmail(newEmail);\n          ctx.setCurrentBalance(parseFloat(data[0].balance));\n          setLoggedIn(true);\n        }\n      });\n  }\n\n  const LoginForm = () => {\n    return (\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          ValidateLogin(values.email, values.password);\n          forceUpdate();\n          setSubmitting(false);\n        }}\n      >\n        {({ isSubmitting, isValid, dirty }) => (\n          <Form>\n            <Card bg=\"warning\" text=\"dark\" style={{ width: \"36rem\" }}>\n              <Card.Body>\n                <Card.Title>Login to Bad Bank</Card.Title>\n                <Card.Text>\n                  <label htmlFor=\"email\">Email</label>\n                  <Field\n                    id=\"email\"\n                    name=\"email\"\n                    className=\"form-control\"\n                    type=\"email\"\n                    placeholder=\"Enter Email\"\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"span\"\n                    className=\"error\"\n                    style={{ color: \"red\" }}\n                  />\n                  <br />\n                  <br />\n                  <label htmlFor=\"password\">Password</label>\n                  <Field\n                    id=\"password\"\n                    name=\"password\"\n                    className=\"form-control\"\n                    type=\"password\"\n                    placeholder=\"Enter Password\"\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"span\"\n                    className=\"error\"\n                    style={{ color: \"red\" }}\n                  />\n                </Card.Text>\n\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting || !(isValid && dirty)}\n                >\n                  Login\n                </Button>\n              </Card.Body>\n            </Card>\n          </Form>\n        )}\n      </Formik>\n    );\n  };\n  const handleLogOut = () => {\n    ctx.setCurrentUser(\"\");\n    setLoggedIn(false);\n  };\n\n  if (ctx.currentUser === \"\") {\n    return LoginForm();\n  } else if (loggedIn) {\n    return (\n      <Card bg=\"warning\" text=\"dark\" style={{ width: \"36rem\" }}>\n        <Card.Body>\n          <Card.Title>Welcome {ctx.currentUser}!</Card.Title>\n          <br />\n          <Button\n            type=\"submit\"\n            variant=\"danger\"\n            className=\"btn btn-primary\"\n            onClick={handleLogOut}\n          >\n            Log Out\n          </Button>\n        </Card.Body>\n      </Card>\n    );\n  } else {\n    setLoggedIn(true);\n    if (ctx.currentUser === \"admin\") {\n      return <Redirect to=\"/alldata\" />;\n    } else {\n      return <Redirect to=\"/deposit\" />;\n    }\n  }\n};\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Invalid email address\")\n    .required(\"Email is required\"),\n  password: Yup.string().required(\"Password is required\"),\n});\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}