{"ast":null,"code":"import _slicedToArray from\"/home/scott/Dropbox/MERN Class (MIT xPRO)/Capstone Good Bank Project/goodbank/goodbankFE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{Button,Card}from\"react-bootstrap\";import UserContext from\"./context.js\";import{Formik,Form,Field}from\"formik\";import*as Yup from\"yup\";import NumberFormat from\"react-number-format\";import Grid from\"@material-ui/core/Grid\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Withdraw=function Withdraw(){var ctx=React.useContext(UserContext);var _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),confMsg=_React$useState2[0],setConfMsg=_React$useState2[1];var setTextColor=function setTextColor(){return ctx.currentBalance<=0?\"red\":\"green\";};function onFormSubmit(values){if(ctx.currentBalance<parseFloat(values.amt)){alert(\"Your balance is too low to withdraw that amount!\");}else{var withdrawAmount=-1*parseFloat(values.amt);ctx.setCurrentBalance(ctx.currentBalance+withdrawAmount);var url=\"/account/update/\".concat(ctx.currentEmail,\"/\").concat(withdrawAmount);fetch(url).then(function(response){return response.text();}).then(function(text){try{var data=JSON.parse(text);console.log(\"JSON:\",data);setConfMsg(\"Balance Updated!\");}catch(err){console.log(\"err:\",text);setConfMsg(\"Withdraw Failed!\");}});setTimeout(function(){return setConfMsg(\"\");},5000);}}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Formik,{initialValues:{amt:\"$0.00\"},validationSchema:validationSchema,onSubmit:function onSubmit(values,_ref){var resetForm=_ref.resetForm,setSubmitting=_ref.setSubmitting;onFormSubmit(values);setSubmitting(false);resetForm();},children:function children(_ref2){var isSubmitting=_ref2.isSubmitting,isValid=_ref2.isValid,dirty=_ref2.dirty;return/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsxs(\"h2\",{style:{color:setTextColor(),display:\"flex\",justifyContent:\"center\",alignItems:\"center\"},children:[\"Balance:\",/*#__PURE__*/_jsx(NumberFormat,{value:ctx.currentBalance,displayType:\"text\",thousandSeparator:true,decimalScale:\"2\",fixedDecimalScale:true,prefix:\"  $\",style:{color:setTextColor()}})]}),/*#__PURE__*/_jsx(Card,{bg:\"danger\",text:\"light\",style:{width:\"18rem\",marginLeft:\"auto\",marginRight:\"auto\"},children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{children:\"Withdraw\"}),/*#__PURE__*/_jsx(Card.Text,{children:\"Withdraw Amount :\"}),/*#__PURE__*/_jsx(Field,{id:\"amt\",type:\"number\",name:\"amt\",step:\"any\",placeholder:\"$0.00\"}),/*#__PURE__*/_jsx(\"div\",{className:\"row justify-content-center\",children:/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",style:{margin:\"20px\"},disabled:isSubmitting||!(isValid&&dirty),children:\"Withdraw\"})})]})})]});}}),/*#__PURE__*/_jsx(Grid,{container:true,item:true,xs:6,justifyContent:\"flex-end\",alignItems:\"center\",children:/*#__PURE__*/_jsx(\"h5\",{style:{color:\"green\"},children:confMsg})})]});};var validationSchema=Yup.object().shape({amt:Yup.number().test(\"is positive\",\"You must enter a positive number\",function(value){return value>0;})});export default Withdraw;","map":{"version":3,"sources":["/home/scott/Dropbox/MERN Class (MIT xPRO)/Capstone Good Bank Project/goodbank/goodbankFE/src/components/withdraw.js"],"names":["React","Button","Card","UserContext","Formik","Form","Field","Yup","NumberFormat","Grid","Withdraw","ctx","useContext","useState","confMsg","setConfMsg","setTextColor","currentBalance","onFormSubmit","values","parseFloat","amt","alert","withdrawAmount","setCurrentBalance","url","currentEmail","fetch","then","response","text","data","JSON","parse","console","log","err","setTimeout","validationSchema","resetForm","setSubmitting","isSubmitting","isValid","dirty","color","display","justifyContent","alignItems","width","marginLeft","marginRight","margin","object","shape","number","test","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport UserContext from \"./context.js\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst Withdraw = () => {\r\n  const ctx = React.useContext(UserContext);\r\n  const [confMsg, setConfMsg] = React.useState(\"\");\r\n  const setTextColor = () => {\r\n    return ctx.currentBalance <= 0 ? \"red\" : \"green\";\r\n  };\r\n\r\n  function onFormSubmit(values) {\r\n    if (ctx.currentBalance < parseFloat(values.amt)) {\r\n      alert(\"Your balance is too low to withdraw that amount!\");\r\n    } else {\r\n      const withdrawAmount = -1 * parseFloat(values.amt);\r\n      ctx.setCurrentBalance(ctx.currentBalance + withdrawAmount);\r\n\r\n      const url = `/account/update/${ctx.currentEmail}/${withdrawAmount}`;\r\n\r\n      fetch(url)\r\n        .then((response) => response.text())\r\n        .then((text) => {\r\n          try {\r\n            const data = JSON.parse(text);\r\n            console.log(\"JSON:\", data);\r\n            setConfMsg(\"Balance Updated!\");\r\n          } catch (err) {\r\n            console.log(\"err:\", text);\r\n            setConfMsg(\"Withdraw Failed!\");\r\n          }\r\n        });\r\n\r\n      setTimeout(() => setConfMsg(\"\"), 5000);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          amt: \"$0.00\",\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={(values, { resetForm, setSubmitting }) => {\r\n          onFormSubmit(values);\r\n          setSubmitting(false);\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({ isSubmitting, isValid, dirty }) => (\r\n          <Form>\r\n            <h2\r\n              style={{\r\n                color: setTextColor(),\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              Balance:\r\n              <NumberFormat\r\n                value={ctx.currentBalance}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n                decimalScale={\"2\"}\r\n                fixedDecimalScale={true}\r\n                prefix={\"  $\"}\r\n                style={{ color: setTextColor() }}\r\n              />\r\n            </h2>\r\n            <Card\r\n              bg=\"danger\"\r\n              text=\"light\"\r\n              style={{\r\n                width: \"18rem\",\r\n                marginLeft: \"auto\",\r\n                marginRight: \"auto\",\r\n              }}\r\n            >\r\n              <Card.Body>\r\n                <Card.Title>Withdraw</Card.Title>\r\n\r\n                <Card.Text>Withdraw Amount :</Card.Text>\r\n                <Field\r\n                  id=\"amt\"\r\n                  type=\"number\"\r\n                  name=\"amt\"\r\n                  step=\"any\"\r\n                  placeholder=\"$0.00\"\r\n                />\r\n                <div className=\"row justify-content-center\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"submit\"\r\n                    style={{ margin: \"20px\" }}\r\n                    disabled={isSubmitting || !(isValid && dirty)}\r\n                  >\r\n                    Withdraw\r\n                  </Button>\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <Grid container item xs={6} justifyContent=\"flex-end\" alignItems=\"center\">\r\n        <h5 style={{ color: \"green\" }}>{confMsg}</h5>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  amt: Yup.number().test(\r\n    \"is positive\",\r\n    \"You must enter a positive number\",\r\n    (value) => value > 0\r\n  ),\r\n});\r\n\r\nexport default Withdraw;\r\n"]},"metadata":{},"sourceType":"module"}