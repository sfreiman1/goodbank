{"ast":null,"code":"var _jsxFileName = \"/home/scott/Dropbox/MERN Class (MIT xPRO)/Capstone Bad Bank Project/goodbankfe/src/components/withdraw.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport UserContext from \"./context.js\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport NumberFormat from \"react-number-format\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Withdraw = () => {\n  _s();\n\n  const ctx = React.useContext(UserContext);\n\n  const setTextColor = () => {\n    return ctx.users[ctx.currentUser].balance <= 0 ? \"red\" : \"green\";\n  };\n\n  function onFormSubmit(values) {\n    if (ctx.users[ctx.currentUser].balance < parseFloat(values.amt)) {\n      alert(\"Your balance is too low to withdraw that amount!\");\n    } else {\n      ctx.users[ctx.currentUser].balance = ctx.users[ctx.currentUser].balance - parseFloat(values.amt);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      amt: \"$0.00\"\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, _ref) => {\n      let {\n        resetForm,\n        setSubmitting\n      } = _ref;\n      onFormSubmit(values);\n      setSubmitting(false);\n      resetForm();\n    },\n    children: _ref2 => {\n      let {\n        isSubmitting,\n        isValid,\n        dirty\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: setTextColor(),\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          children: [\"Balance:\", /*#__PURE__*/_jsxDEV(NumberFormat, {\n            value: ctx.users[ctx.currentUser].balance,\n            displayType: \"text\",\n            thousandSeparator: true,\n            decimalScale: \"2\",\n            fixedDecimalScale: true,\n            prefix: \"  $\",\n            style: {\n              color: setTextColor()\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: \"18rem\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: \"Withdraw\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: \"Withdraw Amount :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              id: \"amt\",\n              type: \"number\",\n              name: \"amt\",\n              step: \"any\",\n              placeholder: \"$0.00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              type: \"submit\",\n              style: {\n                margin: \"20px\"\n              },\n              disabled: isSubmitting || !(isValid && dirty),\n              children: \"Withdraw\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Withdraw, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n\n_c = Withdraw;\nconst validationSchema = Yup.object().shape({\n  amt: Yup.number().test(\"is positive\", \"You must enter a positive number\", value => value > 0)\n});\nexport default Withdraw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"sources":["/home/scott/Dropbox/MERN Class (MIT xPRO)/Capstone Bad Bank Project/goodbankfe/src/components/withdraw.js"],"names":["React","Button","Card","UserContext","Formik","Form","Field","Yup","NumberFormat","Withdraw","ctx","useContext","setTextColor","users","currentUser","balance","onFormSubmit","values","parseFloat","amt","alert","validationSchema","resetForm","setSubmitting","isSubmitting","isValid","dirty","color","display","justifyContent","alignItems","width","marginLeft","marginRight","margin","object","shape","number","test","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport UserContext from \"./context.js\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nconst Withdraw = () => {\r\n  const ctx = React.useContext(UserContext);\r\n  const setTextColor = () => {\r\n    return ctx.users[ctx.currentUser].balance <= 0 ? \"red\" : \"green\";\r\n  };\r\n  function onFormSubmit(values) {\r\n    if (ctx.users[ctx.currentUser].balance < parseFloat(values.amt)) {\r\n      alert(\"Your balance is too low to withdraw that amount!\");\r\n    } else {\r\n      ctx.users[ctx.currentUser].balance =\r\n        ctx.users[ctx.currentUser].balance - parseFloat(values.amt);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        amt: \"$0.00\",\r\n      }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values, { resetForm, setSubmitting }) => {\r\n        onFormSubmit(values);\r\n        setSubmitting(false);\r\n        resetForm();\r\n      }}\r\n    >\r\n      {({ isSubmitting, isValid, dirty }) => (\r\n        <Form>\r\n          <h2\r\n            style={{\r\n              color: setTextColor(),\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            Balance:\r\n            <NumberFormat\r\n              value={ctx.users[ctx.currentUser].balance}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              decimalScale={\"2\"}\r\n              fixedDecimalScale={true}\r\n              prefix={\"  $\"}\r\n              style={{ color: setTextColor() }}\r\n            />\r\n          </h2>\r\n          <Card\r\n            style={{ width: \"18rem\", marginLeft: \"auto\", marginRight: \"auto\" }}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Withdraw</Card.Title>\r\n\r\n              <Card.Text>Withdraw Amount :</Card.Text>\r\n              <Field\r\n                id=\"amt\"\r\n                type=\"number\"\r\n                name=\"amt\"\r\n                step=\"any\"\r\n                placeholder=\"$0.00\"\r\n              />\r\n\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                style={{ margin: \"20px\" }}\r\n                disabled={isSubmitting || !(isValid && dirty)}\r\n              >\r\n                Withdraw\r\n              </Button>\r\n            </Card.Body>\r\n          </Card>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  amt: Yup.number().test(\r\n    \"is positive\",\r\n    \"You must enter a positive number\",\r\n    (value) => value > 0\r\n  ),\r\n});\r\n\r\nexport default Withdraw;\r\n"]},"metadata":{},"sourceType":"module"}